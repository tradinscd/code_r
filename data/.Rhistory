install.packages("chron")
library(chron)
dates2$date.fmt <- chron(as.character(dates2$date_factor), format = "m/d/y")
dates2[, c(1, 2, 4)]
as.character(dates2$date_factor)
dates2$age <- as.numeric(floor(difftime(chron("03/01/2013"), dates2$date.fmt, unit = "days")/360))
dates2[c(1, 2, 4, 5)]
dates2$date.fmt
chron("03/01/2013")
difftime(chron("03/01/2013"), dates2$date.fmt, unit = "days")
floor(difftime(chron("03/01/2013"), dates2$date.fmt, unit = "days")/360)
?floor
difftime(chron("03/01/2013"), dates2$date.fmt, unit = "days")/360
floor(difftime(chron("03/01/2013"), dates2$date.fmt, unit = "days")/360)
library(date)
# create a dates2 variable with simulated data
dates2 <- as.data.frame(
cbind(c(1:5),
c("8/31/70", "NA", "10/12/60", "1/1/66", "12/31/80"),
c("8/31/56", "12-31-1977", "12Aug55", "July 31 1965" ,"30jan1952")))
# add column names
colnames(dates2) <- c("ID", "date_factor", "date_horrible")
# view the dataframe
dates2
dates2$date_autofmt <- as.date(as.character(dates2$date_horrible))
dates2[, c(1, 3, 6)]
install.packages("date")
library(date)
# create a dates2 variable with simulated data
dates2 <- as.data.frame(
cbind(c(1:5),
c("8/31/70", "NA", "10/12/60", "1/1/66", "12/31/80"),
c("8/31/56", "12-31-1977", "12Aug55", "July 31 1965" ,"30jan1952")))
# add column names
colnames(dates2) <- c("ID", "date_factor", "date_horrible")
# view the dataframe
dates2
dates2$date_autofmt <- as.date(as.character(dates2$date_horrible))
dates2[, c(1, 3, 6)]
# Character Dates
# create a dates2 variable with simulated data
dates2 <- as.data.frame(
cbind(c(1:5),
c("8/31/70", "NA", "10/12/60", "1/1/66", "12/31/80"),
c("8/31/56", "12-31-1977", "12Aug55", "July 31 1965" ,"30jan1952")))
# add column names
colnames(dates2) <- c("ID", "date_factor", "date_horrible")
# view the dataframe
dates2
# load the chron packaage
library(chron)
# convert date_factor into characters and the translate it into date format using format =
dates2$date.fmt <- chron(as.character(dates2$date_factor), format = "m/d/y")
# same as above but change the output format
dates2$date.fmt <- chron(as.character(dates2$date_factor), format = "m/d/y", out.format = "month day year")
# create a new variable that is their age in years (thus divide by 360), the floor() function converts the number into integers
dates2$age <- as.numeric(floor(difftime(chron("03/01/2013"), dates2$date.fmt, unit = "days")/360))
# Add a day to each element of a vector of ages
dates2$date.fmt + 1
# Ask which dates in a vector came before a set date
dates2$date.fmt < chron("04/02/62")
library(date)
dates2$date_autofmt <- as.date(as.character(dates2$date_horrible))
dates2[, c(1, 3, 6)]
dates2$date_amazing <- as.Date(as.date(as.character(dates2$date_horrible)))
dates2[, c(1, 3, 7)]
mydata
-information-from-objects.html
mydata <- read.csv("https://sites.google.com/site/rforpublichealthcode/downloads/mydata.csv?attredirects=0&d=1")
mydata <- read.csv("https://sites.google.com/site/rforpublichealthcode/downloads/mydata.csv")
# Extracting Information From Objects Using Names()
# original source: http://rforpublichealth.blogspot.com/2013/03/extracting-information-from-objects.html
url <- "https://sites.google.com/site/rforpublichealthcode/downloads/mydata.csv"
mydata <- read.csv(url)
mydata <- read.csv("~/Downloads/mydata.csv")
View(mydata)
ID <- 1:10
Age <- c(26, 65, 15, 7, 88, 43, 28, 66 ,45, 12)
Sex <- c(1, 0, 1, 1, 0 ,1, 1, 1, 0, 1, 0)
Weight <- c(132, 122, 184, 145, 118, NA, 128, 154, 166, 164)
Height <- c(60, 63, 57, 59, 64, NA, 67, 65, NA, 60)
Married <- c(0, 0, 0, 0, 0, 0, 1, 1, 0, 1)
mydata <- c(ID, Age, Sex, Weight, Height, Married)
# Extracting Information From Objects Using Names()
# original source: http://rforpublichealth.blogspot.com/2013/03/extracting-information-from-objects.html
# create some simulated data
ID <- 1:10
Age <- c(26, 65, 15, 7, 88, 43, 28, 66 ,45, 12)
Sex <- c(1, 0, 1, 1, 0 ,1, 1, 1, 0, 1, 0)
Weight <- c(132, 122, 184, 145, 118, NA, 128, 154, 166, 164)
Height <- c(60, 63, 57, 59, 64, NA, 67, 65, NA, 60)
Married <- c(0, 0, 0, 0, 0, 0, 1, 1, 0, 1)
# create a dataframe of the simulated data
mydata <- c(ID, Age, Sex, Weight, Height, Married)
# names() shows us everything stored under an object
# view everything under mydata
names(mydata)
# we can use names() to change a column header
# change the name of column 4 to Weight_lbs
names(mydata)[4]<-"Weight_lbs"
# run a regression
reg.object <- lm(Weight_lbs ~ Height + Age, data = mydata)
# display all the objects under the regression
names(reg.object)
reg.object <- lm(Weight_lbs ~ Height + Age, data = mydata)
mydata
mydata <- data.frame(ID, Age, Sex, Weight, Height, Married)
# create some simulated data
ID <- 1:10
Age <- c(26, 65, 15, 7, 88, 43, 28, 66 ,45, 12)
Sex <- c(1, 0, 1, 1, 0 ,1, 1, 1, 0, 1)
Weight <- c(132, 122, 184, 145, 118, NA, 128, 154, 166, 164)
Height <- c(60, 63, 57, 59, 64, NA, 67, 65, NA, 60)
Married <- c(0, 0, 0, 0, 0, 0, 1, 1, 0, 1)
# create a dataframe of the simulated data
mydata <- data.frame(ID, Age, Sex, Weight, Height, Married)
# Extracting Information From Objects Using Names()
# original source: http://rforpublichealth.blogspot.com/2013/03/extracting-information-from-objects.html
# create some simulated data
ID <- 1:10
Age <- c(26, 65, 15, 7, 88, 43, 28, 66 ,45, 12)
Sex <- c(1, 0, 1, 1, 0 ,1, 1, 1, 0, 1)
Weight <- c(132, 122, 184, 145, 118, NA, 128, 154, 166, 164)
Height <- c(60, 63, 57, 59, 64, NA, 67, 65, NA, 60)
Married <- c(0, 0, 0, 0, 0, 0, 1, 1, 0, 1)
# create a dataframe of the simulated data
mydata <- data.frame(ID, Age, Sex, Weight, Height, Married)
# names() shows us everything stored under an object
# view everything under mydata
names(mydata)
# we can use names() to change a column header
# change the name of column 4 to Weight_lbs
names(mydata)[4]<-"Weight_lbs"
# run a regression
reg.object <- lm(Weight_lbs ~ Height + Age, data = mydata)
# display all the objects under the regression
names(reg.object)
set.seed(3000)
xseq<-seq(-4,4,.01)
densities<-dnorm(xseq, 0,1)
cumulative<-pnorm(xseq, 0, 1)
randomdeviates<-rnorm(1000,0,1)
par(mfrow=c(1,3), mar=c(3,4,4,2))
plot(xseq, densities, col="darkgreen",xlab="", ylab="Density", type="l",lwd=2, cex=2, main="PDF of Standard Normal", cex.axis=.8)
plot(xseq, cumulative, col="darkorange", xlab="", ylab="Cumulative Probability",type="l",lwd=2, cex=2, main="CDF of Standard Normal", cex.axis=.8)
hist(randomdeviates, main="Random draws from Std Normal", cex.axis=.8, xlim=c(-4,4))
# Simulated Data From Normal Distribution Function
# original source: http://rforpublichealth.blogspot.com/2013/02/normal-distribution-functions.html
set.seed(3000)
xseq<-seq(-4,4,.01)
densities<-dnorm(xseq, 0,1)
cumulative<-pnorm(xseq, 0, 1)
randomdeviates<-rnorm(1000,0,1)
par(mfrow=c(1,3), mar=c(3,4,4,2))
plot(xseq, densities, col="darkgreen",xlab="", ylab="Density", type="l",lwd=2, cex=2, main="PDF of Standard Normal", cex.axis=.8)
plot(xseq, cumulative, col="darkorange", xlab="", ylab="Cumulative Probability",type="l",lwd=2, cex=2, main="CDF of Standard Normal", cex.axis=.8)
hist(randomdeviates, main="Random draws from Std Normal", cex.axis=.8, xlim=c(-4,4))
xseq
par(mfrow=c(1,3), mar=c(3,4,4,2))
plot(xseq, densities, col="darkgreen",xlab="", ylab="Density", type="l",lwd=2, cex=2, main="PDF of Standard Normal", cex.axis=.8)
# Using ifelse
# create some simulated data
ID <- 1:10
Age <- c(26, 65, 15, 7, 88, 43, 28, 66 ,45, 12)
Sex <- c(1, 0, 1, 1, 0 ,1, 1, 1, 0, 1)
Weight <- c(132, 122, 184, 145, 118, NA, 128, 154, 166, 164)
Height <- c(60, 63, 57, 59, 64, NA, 67, 65, NA, 60)
Married <- c(0, 0, 0, 0, 0, 0, 1, 1, 0, 1)
# create a dataframe of the simulated data
mydata <- data.frame(ID, Age, Sex, Weight, Height, Married)
# Using ifelse
# create some simulated data
ID <- 1:10
Age <- c(26, 65, 15, 7, 88, 43, 28, 66 ,45, 12)
Sex <- c(1, 0, 1, 1, 0 ,1, 1, 1, 0, 1)
Weight <- c(132, 122, 184, 145, 118, NA, 128, 154, 166, 164)
Height <- c(60, 63, 57, 59, 64, NA, 67, 65, NA, 60)
Married <- c(0, 0, 0, 0, 0, 0, 1, 1, 0, 1)
# create a dataframe of the simulated data
mydata <- data.frame(ID, Age, Sex, Weight, Height, Married)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# create a new variable called Agegroup2. If Age is greater than 10 and less than 20, Agegroup 2 will have a value of 1. If not, it executes a new ifelse that if Age is over 20, codes the value as 2, else 0.
mydata$Agegroup2<-ifelse(mydata$Age>10 & mydata$Age<20,1,
ifelse(mydata$Age>20, 2,0))
source('/Users/chrisralbon/cra/cra_projects/code_r/ifelse.r', echo=TRUE)
# Using ifelse
# create some simulated data
ID <- 1:10
Age <- c(26, 65, 15, 7, 88, 43, 28, 66 ,45, 12)
Sex <- c(1, 0, 1, 1, 0 ,1, 1, 1, 0, 1)
Weight <- c(132, 122, 184, 145, 118, NA, 128, 154, 166, 164)
Height <- c(60, 63, 57, 59, 64, NA, 67, 65, NA, 60)
Married <- c(0, 0, 0, 0, 0, 0, 1, 1, 0, 1)
# create a dataframe of the simulated data
mydata <- data.frame(ID, Age, Sex, Weight, Height, Married)
# simple example
# create a new variable called Old that, if Age is greater than 40, is 1, else the value is 0
mydata$Old<-ifelse(mydata$Age>40,1,0)
# nested ifelse() allows us to have more than 1 ruleset
# create a new variable called Agegroup2. If Age is greater than 10 and less than 20, Agegroup 2 will have a value of 1. If not, it executes a new ifelse that if Age is over 20, codes the value as 2, else 0.
mydata$Agegroup2<-ifelse(mydata$Age>10 & mydata$Age<20,1,
ifelse(mydata$Age>20, 2,0))
ceiling(5.342)
ceiling(3.14159)
floor(3.14159)
trunc(3.14159)
round(3.14159, digits = 0)
signif(3.14159, digits = 6)
round(3.14159, digits = 3)
#
trunc(3.14159)
trunc(3.14159, 1)
trunc(3.14159, 2)
trunc(3.14159, 9)
#
signif(3.14159, digits = 4)
round(3.14159, digits = 3)
signif(3.14159, digits = 5)
x <- c(4,32,5,2,3,3,3,2,5,5,2,4,5,2)
length(subset(numbers, numbers==x))
numbers <- c(4,23,4,23,5,43,54,56,657,67,67,435,
453,435,324,34,456,56,567,65,34,435)
length(subset(numbers, numbers==67))
numbers <- c(4,23,4,23,5,43,54,56,657,67,67,435,453,435,324,34,456,56,567,65,34,435)
x <- 67
length(subset(numbers, numbers== x ))
# Cutting Up Data
# create some simulated data
ID <- 1:10
Age <- c(26, 65, 15, 7, 88, 43, 28, 66 ,45, 12)
Sex <- c(1, 0, 1, 1, 0 ,1, 1, 1, 0, 1)
Weight <- c(132, 122, 184, 145, 118, NA, 128, 154, 166, 164)
Height <- c(60, 63, 57, 59, 64, NA, 67, 65, NA, 60)
Married <- c(0, 0, 0, 0, 0, 0, 1, 1, 0, 1)
# create a dataframe of the simulated data
mydata <- data.frame(ID, Age, Sex, Weight, Height, Married)
mydata$Agecat1<-cut(mydata$Age, c(0,5,10,15,20,25,30))
class(Agecat1)
category 1-6.
mydata$Agecat1<-cut(mydata$Age, c(0,5,10,15,20,25,30), labels=c(1:6))
class(mydata$Agecat1)
?ls.str
??ls.str
some.states <- state.names[sample(nrow(states.names), size = 5), ]
some.states <- states.name[sample(nrow(states.names), size = 5), ]
some.states <- state.name[sample(nrow(state.name), size = 5), ]
state.name
state.name[sample(nrow(state.name), 3), ]
df = data.frame(matrix(rnorm(20), nrow=10))
df[sample(nrow(df), 3), ]
df <- data.frame(state.name)
randomRows = function(df,n){
return(df[sample(nrow(df),n),])
}
randomRows(df)
df[sample(nrow(df), 3), ]
factor(df[sample(nrow(df), 3), ])
factor(df[sample(nrow(df), 3), ])
length(df)
factor(df[sample(nrow(df), 3), ])
df[sample(nrow(df), 3), ]
# create some simulated data
ID <- 1:10
Age <- c(26, 65, 15, 7, 88, 43, 28, 66 ,45, 12)
Sex <- c(1, 0, 1, 1, 0 ,1, 1, 1, 0, 1)
Weight <- c(132, 122, 184, 145, 118, NA, 128, 154, 166, 164)
Height <- c(60, 63, 57, 59, 64, NA, 67, 65, NA, 60)
Married <- c(0, 0, 0, 0, 0, 0, 1, 1, 0, 1)
# create a dataframe of the simulated data
mydata <- data.frame(ID, Age, Sex, Weight, Height, Married)
sample.df(subset(mydf), 3)
Married <- c(0, 0, 0, 0, 0, 0, 1, 1, 0, 1)
df(subset(df), 3)
df[sample(nrow(df), 3), ]
# create some simulated data
ID <- 1:10
Age <- c(26, 65, 15, 7, 88, 43, 28, 66 ,45, 12)
Sex <- c(1, 0, 1, 1, 0 ,1, 1, 1, 0, 1)
Weight <- c(132, 122, 184, 145, 118, NA, 128, 154, 166, 164)
Height <- c(60, 63, 57, 59, 64, NA, 67, 65, NA, 60)
Married <- c(0, 0, 0, 0, 0, 0, 1, 1, 0, 1)
# create a dataframe of the simulated data
df <- data.frame(ID, Age, Sex, Weight, Height, Married)
# create some simulated data
ID <- 1:10
Age <- c(26, 65, 15, 7, 88, 43, 28, 66 ,45, 12)
Sex <- c(1, 0, 1, 1, 0 ,1, 1, 1, 0, 1)
Weight <- c(132, 122, 184, 145, 118, NA, 128, 154, 166, 164)
Height <- c(60, 63, 57, 59, 64, NA, 67, 65, NA, 60)
Married <- c(0, 0, 0, 0, 0, 0, 1, 1, 0, 1)
df[sample(nrow(df), 3), ]
nrow(df)
sample(nrow(df), 3)
# Get a lat/lon value for each address
geocode.addr <- function(city, country) {
geo.url <- "http://maps.googleapis.com/maps/api/geocode/json?address="
geo.text <- getURL(paste(geo.url, URLencode(paste(city, country, collapse="+")), "&sensor=false", sep=""))
geo.json <- fromJSON(geo.text)
if(geo.json$status == "OK"){
return(geo.json$results[[1]]$geometry$location)
}
else{
if(geo.json$status == "OVER_QUERY_LIMIT") {
stop("Hit rate limit")
}
else {
return(c(NA, NA))
}
}
}
geocode.addr(baltimore, USA)
library(RCurl)
# Get a lat/lon value for each address
geocode.addr <- function(city, country) {
geo.url <- "http://maps.googleapis.com/maps/api/geocode/json?address="
geo.text <- getURL(paste(geo.url, URLencode(paste(city, country, collapse="+")), "&sensor=false", sep=""))
geo.json <- fromJSON(geo.text)
if(geo.json$status == "OK"){
return(geo.json$results[[1]]$geometry$location)
}
else{
if(geo.json$status == "OVER_QUERY_LIMIT") {
stop("Hit rate limit")
}
else {
return(c(NA, NA))
}
}
}
geocode.addr(baltimore, USA)
geocode.addr("Baltimore, USA")
geocode.addr("Baltimore", "USA")
library(RCurl)
library(RJSONIO)
# Get a lat/lon value for each address
geocode.addr <- function(city, country) {
geo.url <- "http://maps.googleapis.com/maps/api/geocode/json?address="
geo.text <- getURL(paste(geo.url, URLencode(paste(city, country, collapse="+")), "&sensor=false", sep=""))
geo.json <- fromJSON(geo.text)
if(geo.json$status == "OK"){
return(geo.json$results[[1]]$geometry$location)
}
else{
if(geo.json$status == "OVER_QUERY_LIMIT") {
stop("Hit rate limit")
}
else {
return(c(NA, NA))
}
}
}
geocode.addr("Baltimore", "USA")
library(RCurl)
library(RJSONIO)
# Get a lat/lon value for each address
geocode.addr <- function(city, country) {
geo.url <- "http://maps.googleapis.com/maps/api/geocode/json?address="
geo.text <- getURL(paste(geo.url, URLencode(paste(city, country, collapse="+")), "&sensor=false", sep=""))
geo.json <- fromJSON(geo.text)
if(geo.json$status == "OK"){
return(geo.json$results[[1]]$geometry$location)
}
else{
if(geo.json$status == "OVER_QUERY_LIMIT") {
stop("Hit rate limit")
}
else {
return(c(NA, NA))
}
}
}
geocode.addr("2617 Eastern Ave, Baltimore", "USA")
# Return A Lat/Long For An Address
# original source: https://gist.github.com/drewconway/2948536
# load the RCurl package
library(RCurl)
# load the RJSONIO package
library(RJSONIO)
# Get a lat/lon value for each address
geocode.addr <- function(city, country) {
geo.url <- "http://maps.googleapis.com/maps/api/geocode/json?address="
geo.text <- getURL(paste(geo.url, URLencode(paste(city, country, collapse="+")), "&sensor=false", sep=""))
geo.json <- fromJSON(geo.text)
if(geo.json$status == "OK"){
return(geo.json$results[[1]]$geometry$location)
}
else{
if(geo.json$status == "OVER_QUERY_LIMIT") {
stop("Hit rate limit")
}
else {
return(c(NA, NA))
}
}
}
# example code:
geocode.addr("1600 Pennsylvania Ave, Washington, DC", "USA")
library(maps)
map("state")
library(maps)
map("state")
library(maps)
map("state")
library(maps)
map("state")
library(maps)
map("state")
library(maps)
map("state")
library(maps)
map("state")
library(maps)
map("state")
library(maps)
map("state")
library(maps)
map("state")
library(maps)
map("state")
library(maps)
map("state")
library(maps)
map("state")
library(maps)
map("state")
map("state")
setwd("/Users/chrisralbon/cra/cra_projects/code_r/data")
df = read.csv("Hurricanes.csv")
dfKatrina = df[df$Name == "KATRINA", ]
dfKatrina = dfKatrina[dfKatrina$Year == max(dfKatrina$Year), ]
points(dfKatrina$Longitude, dfKatrina$Latitude, pch = 19, col = "red")
dfHugo = df[df$Name == "HUGO", ]
dfHugo = dfHugo[dfHugo$Year == max(dfHugo$Year), ]
points(dfHugo$Longitude, dfHugo$Latitude, pch = 19, col = "blue")
dfDonna = df[df$Name == "DONNA", ]
dfDonna = dfDonna[dfDonna$Year == max(dfDonna$Year), ]
points(dfDonna$Longitude, dfDonna$Latitude, pch = 19, col = "green")
head(df)
dfKatrina
dfKatrina <- df[df$Name == "KATRINA", ]
dfKatrina
max(dfKatrina$Year)
dfKatrina$Year
install.packages("sp")
library(sp)
inSC = point.in.polygon(dfHugo$Longitude, dfHugo$Latitude, sc$long, sc$lat)
map("state")
colHugo = ifelse(inSC == 1, "red", "black")
points(dfHugo$Longitude, dfHugo$Latitude, pch = 19, col = colHugo)
map("state")
colHugo <- ifelse(inSC == 1, "red", "black")
inSC = point.in.polygon(dfHugo$Longitude, dfHugo$Latitude, sc$long, sc$lat)
library(sp)
sc = myMapData[myMapData$region == "south carolina", ]
inSC = point.in.polygon(dfHugo$Longitude, dfHugo$Latitude, sc$long, sc$lat)
map("state")
colHugo <- ifelse(inSC == 1, "red", "black")
points(dfHugo$Longitude, dfHugo$Latitude, pch = 19, col = colHugo)
library(sp)
sc <- myMapData[myMapData$region == "south carolina", ]
library(sp)
library(ggplot2)
myMapData = map_data("state")
sc <- myMapData[myMapData$region == "south carolina", ]
inSC <- point.in.polygon(dfHugo$Longitude, dfHugo$Latitude, sc$long, sc$lat)
map("state")
colHugo <- ifelse(inSC == 1, "red", "black")
points(dfHugo$Longitude, dfHugo$Latitude, pch = 19, col = colHugo)
# Replacing Data
# create simulated crime data of 20 observations
number.of.crimes <- runif(20)
# replace the 10th and 11th value in number of crimes with 14 and 1, respectively
replace(number.of.crimes, c(10,11), c(14,1))
# Adding Levels To A Factor (i.e. adding Categories To A Nominal Variable)
# A Factor object is used to unordered categories, that is categories where each one is different but considered equal (e.g. types of fruit, names, gender, countries, etc.)
# One common problem people have with factors is trying to add a level (i.e. add a category) to a factor.
# The reason is that in order to manipulate factors, you have to manipulate it's levels, not the names of each category.
# create simulated distract name data
district <- c("NORTH", "NORTHWEST", "CENTRAL", "SOUTH", "SOUTHWEST", "EAST")
# remake district categories with the combination of district categories and a new SOUTH CENTRAL category
levels(district) <- c(levels(district), "SOUTH CENTRAL")
# Bar Graph
library(ggplot2)
qplot(BOD$Time, BOD$demand, geom="bar", stat="identity")
# Convert the x variable to a factor, so that it is treated as discrete
qplot(factor(BOD$Time), BOD$demand, geom="bar", stat="identity")
qplot(BOD$Time, BOD$demand, geom="bar", stat="identity")
qplot(factor(BOD$Time), BOD$demand, geom="bar", stat="identity")
BOD$Time
# Matching Values
# The match() asks R: where do the values of y appear in x?
x <- c("a","b","c","d","e") # create x that contains the values a through e
y <- c("a","d","e") # create y that contains a, d, e
match(x,y) # where do the values of y (a,d,e) appear in x (a,b,c,d,e)?
# Look closely at the output because it can be confusing. The "1" means that y's first value, "a" matches x's first value. The "2" says that y's 2nd value "d" matches x's 4th value, "d".
district <- c("NORTH", "NORTHWEST", "CENTRAL", "SOUTH", "SOUTHWEST", "WESTERN")
# We can also ask R a more simple question: Does a x appear in y?
"WESTERN" %in% levels(district) # Does the string "WESTERN" appear in the Baltimore police district names
# Matching Values
# The match() asks R: where do the values of y appear in x?
x <- c("a","b","c","d","e") # create x that contains the values a through e
y <- c("a","d","e") # create y that contains a, d, e
match(x,y) # where do the values of y (a,d,e) appear in x (a,b,c,d,e)?
# Look closely at the output because it can be confusing. The "1" means that y's first value, "a" matches x's first value. The "2" says that y's 2nd value "d" matches x's 4th value, "d".
district <- factor("NORTH", "NORTHWEST", "CENTRAL", "SOUTH", "SOUTHWEST", "WESTERN")
# We can also ask R a more simple question: Does a x appear in y?
"WESTERN" %in% levels(district) # Does the string "WESTERN" appear in the Baltimore police district names
district <- factor(c("NORTH", "NORTHWEST", "CENTRAL", "SOUTH", "SOUTHWEST", "WESTERN"))
# We can also ask R a more simple question: Does a x appear in y?
"WESTERN" %in% levels(district) # Does the string "WESTERN" appear in the Baltimore police district names
