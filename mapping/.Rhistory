png(width=1200,height=2200)
data(unemp)
map("usa")
par(mfrow = c(3 1))
map("usa")
?par
par(mfrow = c(2, 1))
map("usa")
# Creating A Thematic Map #2
# load the maps package
library(maps)
# load the ggmap package
library(ggmap)
# create a graphic "grid" for layout purposes of 2 rows and 1 column
par(mfrow = c(2, 1))
# load the US map
map("usa")
# load the US county map
map("county")
# Creating A Thematic Map #2
# load the maps package
library(maps)
# load the ggmap package
library(ggmap)
# create a graphic "grid" for layout purposes of 2 rows and 1 column
par(mfrow = c(2, 1))
# load the US county map
map("county")
# Creating A Thematic Map #2
# original source: http://bcb.dfci.harvard.edu/~aedin/courses/R/CDC/maps.html
# load the maps package
library(maps)
# load the ggmap package
library(ggmap)
# create a graphic "grid" for layout purposes of 2 rows and 1 column
par(mfrow = c(2, 1))
# load the US county map
map("county")
# load national unemployment data
data(unemp)
# load national FIPS county codes
data(county.fips)
# create a range of colors for the map fill
colors = c("#F1EEF6", "#D4B9DA", "#C994C7", "#DF65B0", "#DD1C77", "#980043")
unemp$colorBuckets <- as.numeric(cut(unemp$unemp, c(0, 2, 4, 6, 8, 10, 100)))
# Creating A Thematic Map #2
# original source: http://bcb.dfci.harvard.edu/~aedin/courses/R/CDC/maps.html
# load the maps package
library(maps)
# load the ggmap package
library(ggmap)
# create a graphic "grid" for layout purposes of 2 rows and 1 column
par(mfrow = c(2, 1))
# load the US county map
map("county")
# load national unemployment data
data(unemp)
# load national FIPS county codes
data(county.fips)
# create a range of colors for the map fill
colors = c("#F1EEF6", "#D4B9DA", "#C994C7", "#DF65B0", "#DD1C77", "#980043")
unemp$colorBuckets <- as.numeric(cut(unemp$unemp, c(0, 2, 4, 6, 8, 10, 100)))
colorsmatched <- unemp$colorBuckets[match(county.fips$fips, unemp$fips)]
map("county",
col = colors[colorsmatched],
fill = TRUE,
resolution = 0,
lty = 0,
projection = "polyconic")
# Add border around each State
map("state", col = "white", fill = FALSE, add = TRUE, lty = 1, lwd = 0.2,
projection = "polyconic")
title("unemployment by county, 2009")
leg.txt <- c("<2%", "2-4%", "4-6%", "6-8%", "8-10%", ">10%")
legend("topright", leg.txt, horiz = TRUE, fill = colors)
postscript("Plot3.eps", width = 480, height = 480)
pdf("Plot3.pdf", res = 300, width = 4, height = 4)
# Add border around each State
map("state", col = "white", fill = FALSE, add = TRUE, lty = 1, lwd = 0.4,
projection = "polyconic")
title("unemployment by county, 2009")
leg.txt <- c("<2%", "2-4%", "4-6%", "6-8%", "8-10%", ">10%")
legend("topright", leg.txt, horiz = TRUE, fill = colors)
# Creating A Thematic Map #2
# original source: http://bcb.dfci.harvard.edu/~aedin/courses/R/CDC/maps.html
# load the maps package
library(maps)
# load the ggmap package
library(ggmap)
# create a graphic "grid" for layout purposes of 2 rows and 1 column
par(mfrow = c(2, 1))
# load the US county map
map("county")
# load national unemployment data
data(unemp)
# load national FIPS county codes
data(county.fips)
# create a range of colors for the map fill
colors = c("#F1EEF6", "#D4B9DA", "#C994C7", "#DF65B0", "#DD1C77", "#980043")
unemp$colorBuckets <- as.numeric(cut(unemp$unemp, c(0, 2, 4, 6, 8, 10, 100)))
colorsmatched <- unemp$colorBuckets[match(county.fips$fips, unemp$fips)]
map("county",
col = colors[colorsmatched],
fill = TRUE,
resolution = 0,
lty = 0,
projection = "polyconic")
# Add border around each State
map("state", col = "white", fill = FALSE, add = TRUE, lty = 1, lwd = 0.4,
projection = "polyconic")
title("unemployment by county, 2009")
leg.txt <- c("<2%", "2-4%", "4-6%", "6-8%", "8-10%", ">10%")
legend("topright", leg.txt, horiz = TRUE, fill = colors)
# Creating A Thematic Map #2
# original source: http://bcb.dfci.harvard.edu/~aedin/courses/R/CDC/maps.html
# load the maps package
library(maps)
# load the ggmap package
library(ggmap)
# create a graphic "grid" for layout purposes of 2 rows and 1 column
par(mfrow = c(2, 1))
# load the US county map
map("county")
# load national unemployment data
data(unemp)
# load national FIPS county codes
data(county.fips)
# create a range of colors for the map fill
colors = c("#F1EEF6", "#D4B9DA", "#C994C7", "#DF65B0", "#DD1C77", "#980043")
unemp$colorBuckets <- as.numeric(cut(unemp$unemp, c(0, 2, 4, 6, 8, 10, 100)))
colorsmatched <- unemp$colorBuckets[match(county.fips$fips, unemp$fips)]
map("county",
col = colors[colorsmatched],
fill = TRUE,
resolution = 0,
lty = 0,
projection = "polyconic")
# Add border around each State
map("state", col = "white", fill = FALSE, add = TRUE, lty = 1, lwd = 1,
projection = "polyconic")
title("unemployment by county, 2009")
leg.txt <- c("<2%", "2-4%", "4-6%", "6-8%", "8-10%", ">10%")
legend("topright", leg.txt, horiz = TRUE, fill = colors)
# Creating A Thematic Map #2
# original source: http://bcb.dfci.harvard.edu/~aedin/courses/R/CDC/maps.html
# load the maps package
library(maps)
# load the ggmap package
library(ggmap)
# create a graphic "grid" for layout purposes of 2 rows and 1 column
par(mfrow = c(2, 1))
# load the US county map
map("county")
# load national unemployment data
data(unemp)
# load national FIPS county codes
data(county.fips)
# create a range of colors for the map fill
colors = c("#F1EEF6", "#D4B9DA", "#C994C7", "#DF65B0", "#DD1C77", "#980043")
unemp$colorBuckets <- as.numeric(cut(unemp$unemp, c(0, 2, 4, 6, 8, 10, 100)))
colorsmatched <- unemp$colorBuckets[match(county.fips$fips, unemp$fips)]
map("county",
col = colors[colorsmatched],
fill = TRUE,
resolution = 0,
lty = 0,
projection = "polyconic")
# Add border around each State
map("state", col = "white", fill = FALSE, add = TRUE, lty = 1, lwd = 6,
projection = "polyconic")
title("unemployment by county, 2009")
leg.txt <- c("<2%", "2-4%", "4-6%", "6-8%", "8-10%", ">10%")
legend("topright", leg.txt, horiz = TRUE, fill = colors)
# Creating A Thematic Map #2
# original source: http://bcb.dfci.harvard.edu/~aedin/courses/R/CDC/maps.html
# load the maps package
library(maps)
# load the ggmap package
library(ggmap)
# create a graphic "grid" for layout purposes of 2 rows and 1 column
par(mfrow = c(2, 1))
# load the US county map
map("county")
# load national unemployment data
data(unemp)
# load national FIPS county codes
data(county.fips)
# create a range of colors for the map fill
colors = c("#F1EEF6", "#D4B9DA", "#C994C7", "#DF65B0", "#DD1C77", "#980043")
unemp$colorBuckets <- as.numeric(cut(unemp$unemp, c(0, 2, 4, 6, 8, 10, 100)))
colorsmatched <- unemp$colorBuckets[match(county.fips$fips, unemp$fips)]
map("county",
col = colors[colorsmatched],
fill = TRUE,
resolution = 300,
lty = 0,
projection = "polyconic")
# Add border around each State
map("state", col = "white", fill = FALSE, add = TRUE, lty = 1, lwd = 0.4,
projection = "polyconic")
title("unemployment by county, 2009")
leg.txt <- c("<2%", "2-4%", "4-6%", "6-8%", "8-10%", ">10%")
legend("topright", leg.txt, horiz = TRUE, fill = colors)
violent_crimes <- subset(crime, offense != "auto theft" & offense !=
"theft" & offense != "burglary")
# rank violent crimes
violent_crimes$offense <- factor(violent_crimes$offense, levels = c("robbery",
"aggravated assault", "rape", "murder"))
# restrict to downtown
violent_crimes <- subset(violent_crimes, -95.39681 <= lon & lon <=
-95.34188 & 29.73631 <= lat & lat <= 29.784)
violent_crimes <- subset(crime, offense != "auto theft" & offense !=
"theft" & offense != "burglary")
# rank violent crimes
violent_crimes$offense <- factor(violent_crimes$offense, levels = c("robbery",
"aggravated assault", "rape", "murder"))
# restrict to downtown
violent_crimes <- subset(violent_crimes, -95.39681 <= lon & lon <=
-95.34188 & 29.73631 <= lat & lat <= 29.784)
HoustonMap <- qmap('houston', zoom = 14,color = 'bw', legend = 'topleft')
HoustonMap +geom_point(aes(x = lon, y = lat,
size = offense,colour = offense), data = violent_crimes )
require(maps)
require(ggmap)
violent_crimes <- subset(crime, offense != "auto theft" & offense !=
"theft" & offense != "burglary")
# rank violent crimes
violent_crimes$offense <- factor(violent_crimes$offense, levels = c("robbery",
"aggravated assault", "rape", "murder"))
# restrict to downtown
violent_crimes <- subset(violent_crimes, -95.39681 <= lon & lon <=
-95.34188 & 29.73631 <= lat & lat <= 29.784)
HoustonMap <- qmap('houston', zoom = 14,color = 'bw', legend = 'topleft')
HoustonMap +geom_point(aes(x = lon, y = lat,
size = offense,colour = offense), data = violent_crimes )
## Simulate some data
## 3 Factor Variables
FacVar1 = as.factor(rep(c("level1", "level2"), 25))
FacVar2 = as.factor(rep(c("levelA", "levelB", "levelC"), 17)[-51])
FacVar3 = as.factor(rep(c("levelI", "levelII", "levelIII", "levelIV"), 13)[-c(51:52)])
## 4 Numeric Vars
set.seed(123)
NumVar1 = round(rnorm(n = 50, mean = 1000, sd = 50), digits = 2)  ## Normal distribution
set.seed(123)
NumVar2 = round(runif(n = 50, min = 500, max = 1500), digits = 2)  ## Uniform distribution
set.seed(123)
NumVar3 = round(rexp(n = 50, rate = 0.001))  ## Exponential distribution
NumVar4 = 2001:2050
simData = data.frame(FacVar1, FacVar2, FacVar3, NumVar1, NumVar2, NumVar3, NumVar4)
## Simulate some data
## 3 Factor Variables
FacVar1 = as.factor(rep(c("level1", "level2"), 25))
FacVar2 = as.factor(rep(c("levelA", "levelB", "levelC"), 17)[-51])
FacVar3 = as.factor(rep(c("levelI", "levelII", "levelIII", "levelIV"), 13)[-c(51:52)])
## 4 Numeric Vars
set.seed(123)
NumVar1 = round(rnorm(n = 50, mean = 1000, sd = 50), digits = 2)  ## Normal distribution
set.seed(123)
NumVar2 = round(runif(n = 50, min = 500, max = 1500), digits = 2)  ## Uniform distribution
set.seed(123)
NumVar3 = round(rexp(n = 50, rate = 0.001))  ## Exponential distribution
NumVar4 = 2001:2050
simData = data.frame(FacVar1, FacVar2, FacVar3, NumVar1, NumVar2, NumVar3, NumVar4)
library(ggplot2)
library(reshape2)
ggplot(simData, aes(y = NumVar1, x = 1:nrow(simData), group = "NumVar1")) +
geom_point() + geom_line() + xlab("")  ## Index plot
## Simulate some data
## 3 Factor Variables
FacVar1 = as.factor(rep(c("level1", "level2"), 25))
FacVar2 = as.factor(rep(c("levelA", "levelB", "levelC"), 17)[-51])
FacVar3 = as.factor(rep(c("levelI", "levelII", "levelIII", "levelIV"), 13)[-c(51:52)])
## 4 Numeric Vars
set.seed(123)
NumVar1 = round(rnorm(n = 50, mean = 1000, sd = 50), digits = 2)  ## Normal distribution
set.seed(123)
NumVar2 = round(runif(n = 50, min = 500, max = 1500), digits = 2)  ## Uniform distribution
set.seed(123)
NumVar3 = round(rexp(n = 50, rate = 0.001))  ## Exponential distribution
NumVar4 = 2001:2050
simData = data.frame(FacVar1, FacVar2, FacVar3, NumVar1, NumVar2, NumVar3, NumVar4)
library(ggplot2)
library(reshape2)
ggplot(simData, aes(y = NumVar1, x = 1:nrow(simData), group = "NumVar1")) +
geom_point() + geom_line() + xlab("")  ## Index plot
dev.off()
## Simulate some data
## 3 Factor Variables
FacVar1 = as.factor(rep(c("level1", "level2"), 25))
FacVar2 = as.factor(rep(c("levelA", "levelB", "levelC"), 17)[-51])
FacVar3 = as.factor(rep(c("levelI", "levelII", "levelIII", "levelIV"), 13)[-c(51:52)])
## 4 Numeric Vars
set.seed(123)
NumVar1 = round(rnorm(n = 50, mean = 1000, sd = 50), digits = 2)  ## Normal distribution
set.seed(123)
NumVar2 = round(runif(n = 50, min = 500, max = 1500), digits = 2)  ## Uniform distribution
set.seed(123)
NumVar3 = round(rexp(n = 50, rate = 0.001))  ## Exponential distribution
NumVar4 = 2001:2050
simData = data.frame(FacVar1, FacVar2, FacVar3, NumVar1, NumVar2, NumVar3, NumVar4)
library(ggplot2)
library(reshape2)
ggplot(simData, aes(y = NumVar1, x = 1:nrow(simData), group = "NumVar1")) +
geom_point() + geom_line() + xlab("")  ## Index plot
dev.cur()
dev.off()
## 3 Factor Variables
FacVar1 = as.factor(rep(c("level1", "level2"), 25))
FacVar2 = as.factor(rep(c("levelA", "levelB", "levelC"), 17)[-51])
FacVar3 = as.factor(rep(c("levelI", "levelII", "levelIII", "levelIV"), 13)[-c(51:52)])
## 4 Numeric Vars
set.seed(123)
NumVar1 = round(rnorm(n = 50, mean = 1000, sd = 50), digits = 2)  ## Normal distribution
set.seed(123)
NumVar2 = round(runif(n = 50, min = 500, max = 1500), digits = 2)  ## Uniform distribution
set.seed(123)
NumVar3 = round(rexp(n = 50, rate = 0.001))  ## Exponential distribution
NumVar4 = 2001:2050
simData = data.frame(FacVar1, FacVar2, FacVar3, NumVar1, NumVar2, NumVar3, NumVar4)
library(ggplot2)
library(reshape2)
ggplot(simData, aes(y = NumVar1, x = 1:nrow(simData), group = "NumVar1")) +
geom_point() + geom_line() + xlab("")  ## Index plot
ggplot(simData, aes(x = NumVar1)) + geom_histogram()  ## histogram
ggplot(simData, aes(x = NumVar1)) + geom_density()  ## Kernel density plot
ggplot(simtmpmelt, aes(x = value, color = variable)) + geom_density()
# make sure the graphic displays in RStudio
dev.cur()
dev.off()
## Simulate some data
## 3 Factor Variables
FacVar1 = as.factor(rep(c("level1", "level2"), 25))
FacVar2 = as.factor(rep(c("levelA", "levelB", "levelC"), 17)[-51])
FacVar3 = as.factor(rep(c("levelI", "levelII", "levelIII", "levelIV"), 13)[-c(51:52)])
## 4 Numeric Vars
set.seed(123)
NumVar1 = round(rnorm(n = 50, mean = 1000, sd = 50), digits = 2)  ## Normal distribution
set.seed(123)
NumVar2 = round(runif(n = 50, min = 500, max = 1500), digits = 2)  ## Uniform distribution
set.seed(123)
NumVar3 = round(rexp(n = 50, rate = 0.001))  ## Exponential distribution
NumVar4 = 2001:2050
simData = data.frame(FacVar1, FacVar2, FacVar3, NumVar1, NumVar2, NumVar3, NumVar4)
library(ggplot2)
library(reshape2)
ggplot(simData, aes(y = NumVar1, x = 1:nrow(simData), group = "NumVar1")) +
geom_point() + geom_line() + xlab("")  ## Index plot
ggplot(simData, aes(x = NumVar1)) + geom_histogram()  ## histogram
ggplot(simData, aes(x = NumVar1)) + geom_density()  ## Kernel density plot
ggplot(simData, aes(x = factor(""), y = NumVar1)) + geom_boxplot() + xlab("")  ## box plot
## barplot
ggplot(simData, aes(x = FacVar3)) + geom_bar()
simtmp = simData[, c(4:5)]  ## 4th and 5th columns are NumVar1 and NumVar2
simtmp$index = 1:nrow(simtmp)
simtmpmelt = melt(simtmp, id = c("index"))
## line plots with observation number as index
ggplot(simtmpmelt, aes(y = value, x = index, color = variable)) + geom_point() +
geom_line() + xlab("")
## Let's draw density functions for NumVar1 & NumVar2
ggplot(simtmpmelt, aes(x = value, color = variable)) + geom_density()
ggMMplot <- function(var1, var2) {
require(ggplot2)
levVar1 <- length(levels(var1))
levVar2 <- length(levels(var2))
jointTable <- prop.table(table(var1, var2))
plotData <- as.data.frame(jointTable)
plotData$marginVar1 <- prop.table(table(var1))
plotData$var2Height <- plotData$Freq/plotData$marginVar1
plotData$var1Center <- c(0, cumsum(plotData$marginVar1)[1:levVar1 - 1]) +
plotData$marginVar1/2
ggplot(plotData, aes(var1Center, var2Height)) + geom_bar(stat = "identity",
aes(width = marginVar1, fill = var2), col = "Black") + geom_text(aes(label = as.character(var1),
x = var1Center, y = 1.05))
}
ggMMplot(simData$FacVar2, simData$FacVar3)
## barplots
bartabledat = as.data.frame(table(simData$FacVar2, simData$FacVar3))  ## get the cross tab
ggplot(bartabledat, aes(x = Var2, y = Freq, fill = Var1)) + geom_bar(position = "dodge")  ## plot
FacVar2 = as.factor(rep(c("levelA", "levelB", "levelC"), 17)[-51])
View(simData)
rep(c("levelA", "levelB", "levelC"), 17)[-51]
rep(c("levelA", "levelB", "levelC"), 17)
# Basic ggplot2 examples
# original source: https://github.com/patilv/3graphs/blob/master/ggplot2Page/index.md
# make sure the graphic displays in RStudio by turning off external devices
dev.cur()
dev.off()
## Create some simulated data
## create three factor variables of length 50.
FacVar1 = as.factor(rep(c("level1", "level2"), 25))
FacVar2 = as.factor(rep(c("levelA", "levelB", "levelC"), 17)[-51])
FacVar3 = as.factor(rep(c("levelI", "levelII", "levelIII", "levelIV"), 13)[-c(51:52)])
## create four numeric variables frpm different distributions
## normal distribution
set.seed(123)
NumVar1 = round(rnorm(n = 50, mean = 1000, sd = 50), digits = 2)
set.seed(123)
## uniform distribution
NumVar2 = round(runif(n = 50, min = 500, max = 1500), digits = 2)
## exponential distribution
set.seed(123)
NumVar3 = round(rexp(n = 50, rate = 0.001))
## sequence
NumVar4 = 2001:2050
## merge all the variables in a dataframe
simData = data.frame(FacVar1, FacVar2, FacVar3, NumVar1, NumVar2, NumVar3, NumVar4)
## load required packages
library(ggplot2)
library(reshape2)
# one variable plots
# create a plot of NumVar1's values and their row number
ggplot(simData, aes(y = NumVar1, x = 1:nrow(simData), group = "NumVar1")) + geom_point() + geom_line() + xlab("")
# create a histogram of NumVar1
ggplot(simData, aes(x = NumVar1)) + geom_histogram()  ## histogram
ggplot(simData, aes(x = NumVar1, binwidth = x)) + geom_histogram()  ## histogram
ggplot(simData, aes(x = NumVar1, binwidth = 30)) + geom_histogram()  ## histogram
30
ggplot(simData, aes(x = NumVar1)) + geom_histogram(binwidth = 30)  ## histogram
ggplot(simData, aes(x = NumVar1)) + geom_histogram(binwidth = x)
ggplot(simData, aes(x = NumVar1)) + geom_histogram(binwidth = 10)
# create a histogram of NumVar1
ggplot(simData, aes(x = NumVar1)) + geom_histogram(binwidth = range/30)
# create a histogram of NumVar1
ggplot(simData, aes(x = NumVar1)) + geom_histogram(binwidth = 1)
ggplot(simData, aes(x = NumVar1)) + geom_histogram(binwidth = 5)
# create a histogram of NumVar1
ggplot(simData, aes(x = NumVar1)) + geom_histogram(binwidth = range(x)/30)
ggplot(simData, aes(x = NumVar1)) + geom_histogram(binwidth = range(NumVar1)/30)
ggplot(simData, aes(x = NumVar1)) + geom_histogram()
# create a density plot of NumVar1
ggplot(simData, aes(x = NumVar1)) + geom_density()
# create a boxplot of NumVar1
ggplot(simData, aes(x = factor(""), y = NumVar1)) + geom_boxplot() + xlab("")
ggplot(simData, aes(x = FacVar3)) + geom_bar()
ggplot(simData, aes(x = NumVar1, y = NumVar2)) + geom_point()
ggMMplot <- function(var1, var2) {
require(ggplot2)
levVar1 <- length(levels(var1))
levVar2 <- length(levels(var2))
jointTable <- prop.table(table(var1, var2))
plotData <- as.data.frame(jointTable)
plotData$marginVar1 <- prop.table(table(var1))
plotData$var2Height <- plotData$Freq/plotData$marginVar1
plotData$var1Center <- c(0, cumsum(plotData$marginVar1)[1:levVar1 - 1]) +
plotData$marginVar1/2
ggplot(plotData, aes(var1Center, var2Height)) + geom_bar(stat = "identity",
aes(width = marginVar1, fill = var2), col = "Black") + geom_text(aes(label = as.character(var1),
x = var1Center, y = 1.05))
}
ggMMplot(simData$FacVar2, simData$FacVar3)
bartabledat = as.data.frame(table(simData$FacVar2, simData$FacVar3))  ## get the cross tab
ggplot(bartabledat, aes(x = Var2, y = Freq, fill = Var1)) + geom_bar(position = "dodge")  ## plot
bartabledat = as.data.frame(table(simData$FacVar2, simData$FacVar3))  ## get the cross tab
ggplot(bartabledat, aes(x = Var2, fill = Var1)) + geom_bar(position = "dodge")  ## plot
ggplot(bartabledat, aes(x = Var2, stat="bin", fill = Var1)) + geom_bar(position = "dodge")  ## plot
ggplot(bartabledat, aes(x = Var2, y = Freq, fill = Var1)) + geom_bar(position = "dodge")  ## plot
stat
ggplot(bartabledat, aes(x = Var2, stat="bin", fill = Var1)) + geom_bar(position = "dodge")  ## plot
bartabledat
bartabledat = as.data.frame(table(simData$FacVar2, simData$FacVar3))  ## get the cross tab
ggplot(bartabledat, aes(x = Var2, y = Freq, fill = Var1)) + geom_bar(position = "dodge")  ## plot
ggplot(simData, aes(x = simData$FacVar2, stat="bin", fill = Var1)) + geom_bar(position = "dodge")
ggplot(simData, aes(x = simData$FacVar2, stat="bin", fill = simData$Var1)) + geom_bar(position = "dodge")
# create a scatterplot of NumVar1 and NumVar 2
ggplot(simData, aes(x = NumVar1, y = NumVar2)) + geom_point()
bartabledat = as.data.frame(table(simData$FacVar2, simData$FacVar3))
ggplot(bartabledat, aes(x = Var2, y = Freq, fill = Var1)) + geom_bar(position = "dodge")
ggplot(bartabledat, aes(x = Var2, y = Freq, fill = Var1)) + geom_bar()  ## stacked
ggplot(simData, aes(x = NumVar1, y = NumVar2, color = FacVar1)) + geom_point()
ggplot(simData, aes(x = NumVar1, y = NumVar2, size = NumVar3)) + geom_point()
ggplot(bartabledat, aes(x = Var2, y = Freq, fill = Var1)) + geom_bar(position = "dodge")
bartabledat = as.data.frame(table(simData$FacVar2, simData$FacVar3))
View(bartabledat)
ggplot(bartabledat, aes(x = Var2, y = Freq, fill = Var1)) + geom_bar()
bartableprop = as.data.frame(prop.table(table(simData$FacVar2, simData$FacVar3), 2) * 100)
View(bartableprop)
bartableprop = as.data.frame(prop.table(table(simData$FacVar2, simData$FacVar3), 2) * 100)
ggplot(simData, aes(x = NumVar1, y = NumVar2, color = FacVar1)) + geom_point()
ggplot(simData, aes(x = NumVar1, y = NumVar2, color = FacVar1)) + geom_point()
ggplot(simData, aes(x = NumVar1, y = NumVar2, color = FacVar1)) + geom_point()
bartableprop = as.data.frame(prop.table(table(simData$FacVar2, simData$FacVar3), 2) * 100)
ggplot(bartableprop, aes(x = Var2, y = Freq, fill = Var1)) + geom_bar()
ggplot(simData, aes(x = NumVar1, y = NumVar2, size = NumVar3)) + geom_point()
ggplot(simData, aes(x = NumVar1, y = NumVar2, size = NumVar3, color = NumVar3)) + geom_point()
require(RCurl)
require(XML)
google.counts<-function(s){
search.url<-paste("http://www.google.com/search?q=",gsub(" ","+",s),sep="")
search.html<-getURL(search.url)
parse.search<-htmlTreeParse(search.html,useInternalNodes = TRUE)
search.nodes<-getNodeSet(parse.search,"//div[@id='resultStats']")
search.value<-strsplit(xmlValue(search.nodes[[1]])," ",fixed=TRUE)[[1]][2]
return(as.numeric(gsub(",","",search.value,fixed=TRUE)))
}
google.counts(frogs)
google.counts("frogs")
search.url<-paste("http://www.google.com/search?q=",gsub(" ","+",s),sep="")
frogs" <- s
"frogs" <- s
"frogs" <- s
"frogs" <- s
s <- "frogs"
search.url<-paste("http://www.google.com/search?q=",gsub(" ","+",s),sep="")
search.html<-getURL(search.url)
parse.search<-htmlTreeParse(search.html,useInternalNodes = TRUE)
search.nodes<-getNodeSet(parse.search,"//div[@id='resultStats']")
search.value<-strsplit(xmlValue(search.nodes[[1]])," ",fixed=TRUE)[[1]][2]
return(as.numeric(gsub(",","",search.value,fixed=TRUE)))
search.url
search.html
parse.search
search.nodes
